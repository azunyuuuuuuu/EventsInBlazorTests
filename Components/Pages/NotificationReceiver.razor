@page "/notificationreceiver"
@using EventsInBlazorTests.Services
@implements IDisposable

@inject ILogger<NotificationReceiver> logger
@inject NotifyService notifyService

<PageTitle>Notification Receiver</PageTitle>

<h1>Notification Receiver</h1>

<p role="status">This page is designed to receive notifications.</p>

<p role="status">Current count: @currentCount</p>

@code {
    private int currentCount = 0;

    // Wird beim Initialisieren der Komponente aufgerufen und registriert den Benachrichtigungshandler.
    protected override void OnInitialized()
    {
        logger.LogInformation("NotificationReceiver initialisiert");
        notifyService.OnNotificationReceived += HandleNotification;
        logger.LogInformation("Eventhandler für Benachrichtigungen registriert");
    }

    // Eventhandler: Erhöht den Zähler bei eingehender Benachrichtigung und aktualisiert die UI.
    // Wichtig! Diese Methode muss asynchron aufgerufen werden damit eine Aktualisierung der UI erfolgen kann.
    // Ansonsten treten Exceptions auf.
    private async void HandleNotification()
    {
        logger.LogInformation("Benachrichtigung empfangen");
        currentCount++;

        // Es ist wichtig diese Zeile auszuführen, um den UI-Thread korrekt zu aktualisieren.
        await InvokeAsync(StateHasChanged);
        logger.LogInformation("Status aktualisiert. Aktueller Zähler: {Count}", currentCount);
    }

    // Deregistriert den Eventhandler, wenn die Komponente freigegeben wird, um memoryleaks zu vermeiden.
    public void Dispose()
    {
        logger.LogInformation("NotificationReceiver wird freigegeben");
        notifyService.OnNotificationReceived -= HandleNotification;
        logger.LogInformation("Eventhandler für Benachrichtigungen deregistriert");
    }
}