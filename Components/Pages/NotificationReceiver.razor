@page "/notificationreceiver"
@using EventsInBlazorTests.Services
@implements IDisposable

@inject ILogger<NotificationReceiver> logger
@inject NotifyService notifyService

<PageTitle>Notification Receiver</PageTitle>

<h1>Notification Receiver</h1>

<p role="status">This page is designed to receive notifications.</p>

<p role="status">Current count: @currentCount</p>

@code {
    private int currentCount = 0;

    /// <summary>
    /// Wird beim Initialisieren der Komponente aufgerufen und registriert den Benachrichtigungshandler.
    /// </summary>
    protected override void OnInitialized()
    {
    logger.LogInformation("NotificationReceiver initialisiert");
        notifyService.OnNotificationReceived += HandleNotification;
    logger.LogInformation("Ereignishandler für Benachrichtigungen registriert");
    }

    /// <summary>
    /// Ereignishandler: Erhöht den Zähler bei eingehender Benachrichtigung und aktualisiert die UI.
    /// </summary>
    /// <remarks>
    /// Verwendet <see cref="InvokeAsync(Action)"/>, um einen sicheren UI-Refresh im richtigen Synchronisationskontext auszuführen.
    /// </remarks>
    private async void HandleNotification()
    {
    logger.LogInformation("Benachrichtigung empfangen");
        currentCount++;
        await InvokeAsync(StateHasChanged);
    logger.LogInformation("Status aktualisiert. Aktueller Zähler: {Count}", currentCount);
    }

    /// <summary>
    /// Deregistriert den Ereignishandler, wenn die Komponente freigegeben wird, um Speicherlecks zu vermeiden.
    /// </summary>
    public void Dispose()
    {
    logger.LogInformation("NotificationReceiver wird freigegeben");
        notifyService.OnNotificationReceived -= HandleNotification;
    logger.LogInformation("Ereignishandler für Benachrichtigungen deregistriert");
    }
}